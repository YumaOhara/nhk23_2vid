
nhk23_2vid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800385c  0800385c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800385c  0800385c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  08003874  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003874  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc24  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d48  00000000  00000000  0002bc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001898c  00000000  00000000  0002f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db4c  00000000  00000000  00047adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086df2  00000000  00000000  00055628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc41a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003324  00000000  00000000  000dc470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800381c 	.word	0x0800381c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800381c 	.word	0x0800381c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_UART_RxCpltCallback>:
uint8_t LeftAxisX  = 64;
uint8_t LeftAxisY  = 64;

// UART通信の受信完了時に、ボタンのON/OFFやアナログスティックの値を代入
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	B     = (RxBuffer[2] & 0b01000000) >> 6;
 800051c:	4b49      	ldr	r3, [pc, #292]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	119b      	asrs	r3, r3, #6
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b47      	ldr	r3, [pc, #284]	; (8000648 <HAL_UART_RxCpltCallback+0x134>)
 800052c:	701a      	strb	r2, [r3, #0]
	A     = (RxBuffer[2] & 0b00100000) >> 5;
 800052e:	4b45      	ldr	r3, [pc, #276]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	115b      	asrs	r3, r3, #5
 8000534:	b2db      	uxtb	r3, r3
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4b43      	ldr	r3, [pc, #268]	; (800064c <HAL_UART_RxCpltCallback+0x138>)
 800053e:	701a      	strb	r2, [r3, #0]
	X     = (RxBuffer[1] & 0b00000001);
 8000540:	4b40      	ldr	r3, [pc, #256]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000542:	785b      	ldrb	r3, [r3, #1]
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b41      	ldr	r3, [pc, #260]	; (8000650 <HAL_UART_RxCpltCallback+0x13c>)
 800054c:	701a      	strb	r2, [r3, #0]
	Y     = (RxBuffer[2] & 0b00010000) >> 4;
 800054e:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000550:	789b      	ldrb	r3, [r3, #2]
 8000552:	111b      	asrs	r3, r3, #4
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b3d      	ldr	r3, [pc, #244]	; (8000654 <HAL_UART_RxCpltCallback+0x140>)
 800055e:	701a      	strb	r2, [r3, #0]

	RIGHT = (RxBuffer[2] & 0b00000100) >> 2;
 8000560:	4b38      	ldr	r3, [pc, #224]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	109b      	asrs	r3, r3, #2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <HAL_UART_RxCpltCallback+0x144>)
 8000570:	701a      	strb	r2, [r3, #0]
	DOWN  = (RxBuffer[2] & 0b00000010) >> 1;
 8000572:	4b34      	ldr	r3, [pc, #208]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	105b      	asrs	r3, r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b36      	ldr	r3, [pc, #216]	; (800065c <HAL_UART_RxCpltCallback+0x148>)
 8000582:	701a      	strb	r2, [r3, #0]
	LEFT  = (RxBuffer[2] & 0b00001000) >> 3;
 8000584:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	10db      	asrs	r3, r3, #3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b33      	ldr	r3, [pc, #204]	; (8000660 <HAL_UART_RxCpltCallback+0x14c>)
 8000594:	701a      	strb	r2, [r3, #0]
	UP    = (RxBuffer[2] & 0b00000001);
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <HAL_UART_RxCpltCallback+0x150>)
 80005a2:	701a      	strb	r2, [r3, #0]

	R1    = (RxBuffer[1] & 0b00001000) >> 3;
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 80005a6:	785b      	ldrb	r3, [r3, #1]
 80005a8:	10db      	asrs	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <HAL_UART_RxCpltCallback+0x154>)
 80005b4:	701a      	strb	r2, [r3, #0]
	R2    = (RxBuffer[1] & 0b00010000) >> 4;
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	111b      	asrs	r3, r3, #4
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <HAL_UART_RxCpltCallback+0x158>)
 80005c6:	701a      	strb	r2, [r3, #0]
	L1    = (RxBuffer[1] & 0b00000010) >> 1;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	105b      	asrs	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <HAL_UART_RxCpltCallback+0x15c>)
 80005d8:	701a      	strb	r2, [r3, #0]
	L2    = (RxBuffer[1] & 0b00000100) >> 2;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	109b      	asrs	r3, r3, #2
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <HAL_UART_RxCpltCallback+0x160>)
 80005ea:	701a      	strb	r2, [r3, #0]

	START = (RxBuffer[1] & 0b00100000) >> 5;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	115b      	asrs	r3, r3, #5
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <HAL_UART_RxCpltCallback+0x164>)
 80005fc:	701a      	strb	r2, [r3, #0]
	BACK  = (RxBuffer[1] & 0b01000000) >> 6;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	119b      	asrs	r3, r3, #6
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_UART_RxCpltCallback+0x168>)
 800060e:	701a      	strb	r2, [r3, #0]

	RightAxisX = RxBuffer[5];
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000612:	795a      	ldrb	r2, [r3, #5]
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <HAL_UART_RxCpltCallback+0x16c>)
 8000616:	701a      	strb	r2, [r3, #0]
	RightAxisY = RxBuffer[6];
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 800061a:	799a      	ldrb	r2, [r3, #6]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <HAL_UART_RxCpltCallback+0x170>)
 800061e:	701a      	strb	r2, [r3, #0]
	LeftAxisX  = RxBuffer[3];
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000622:	78da      	ldrb	r2, [r3, #3]
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <HAL_UART_RxCpltCallback+0x174>)
 8000626:	701a      	strb	r2, [r3, #0]
	LeftAxisY  = RxBuffer[4];
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 800062a:	791a      	ldrb	r2, [r3, #4]
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_UART_RxCpltCallback+0x178>)
 800062e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart2, RxBuffer, 8);
 8000630:	2208      	movs	r2, #8
 8000632:	4904      	ldr	r1, [pc, #16]	; (8000644 <HAL_UART_RxCpltCallback+0x130>)
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <HAL_UART_RxCpltCallback+0x17c>)
 8000636:	f002 fcb7 	bl	8002fa8 <HAL_UART_Receive_IT>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000070 	.word	0x20000070
 8000648:	20000078 	.word	0x20000078
 800064c:	20000079 	.word	0x20000079
 8000650:	2000007a 	.word	0x2000007a
 8000654:	2000007b 	.word	0x2000007b
 8000658:	2000007c 	.word	0x2000007c
 800065c:	2000007d 	.word	0x2000007d
 8000660:	2000007e 	.word	0x2000007e
 8000664:	2000007f 	.word	0x2000007f
 8000668:	20000080 	.word	0x20000080
 800066c:	20000081 	.word	0x20000081
 8000670:	20000082 	.word	0x20000082
 8000674:	20000083 	.word	0x20000083
 8000678:	20000084 	.word	0x20000084
 800067c:	20000085 	.word	0x20000085
 8000680:	20000000 	.word	0x20000000
 8000684:	20000001 	.word	0x20000001
 8000688:	20000002 	.word	0x20000002
 800068c:	20000003 	.word	0x20000003
 8000690:	2000002c 	.word	0x2000002c

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fde0 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f809 	bl	80006b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f93a 	bl	8000918 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 f90e 	bl	80008c4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006a8:	f000 f848 	bl	800073c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 80006ac:	f000 fc6a 	bl	8000f84 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x1c>

080006b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b090      	sub	sp, #64	; 0x40
 80006b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	2228      	movs	r2, #40	; 0x28
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f8a3 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	2301      	movs	r3, #1
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f96a 	bl	80019d4 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000706:	f000 f98b 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fbd5 	bl	8001ed4 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000730:	f000 f976 	bl	8000a20 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3740      	adds	r7, #64	; 0x40
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b096      	sub	sp, #88	; 0x58
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2220      	movs	r2, #32
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f003 f849 	bl	800380c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800077a:	4b50      	ldr	r3, [pc, #320]	; (80008bc <MX_TIM1_Init+0x180>)
 800077c:	4a50      	ldr	r2, [pc, #320]	; (80008c0 <MX_TIM1_Init+0x184>)
 800077e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144;
 8000780:	4b4e      	ldr	r3, [pc, #312]	; (80008bc <MX_TIM1_Init+0x180>)
 8000782:	2290      	movs	r2, #144	; 0x90
 8000784:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b4d      	ldr	r3, [pc, #308]	; (80008bc <MX_TIM1_Init+0x180>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800078c:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <MX_TIM1_Init+0x180>)
 800078e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b49      	ldr	r3, [pc, #292]	; (80008bc <MX_TIM1_Init+0x180>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800079a:	4b48      	ldr	r3, [pc, #288]	; (80008bc <MX_TIM1_Init+0x180>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b46      	ldr	r3, [pc, #280]	; (80008bc <MX_TIM1_Init+0x180>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007a6:	4845      	ldr	r0, [pc, #276]	; (80008bc <MX_TIM1_Init+0x180>)
 80007a8:	f001 fd2e 	bl	8002208 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007b2:	f000 f935 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c0:	4619      	mov	r1, r3
 80007c2:	483e      	ldr	r0, [pc, #248]	; (80008bc <MX_TIM1_Init+0x180>)
 80007c4:	f001 ff8c 	bl	80026e0 <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007ce:	f000 f927 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d2:	483a      	ldr	r0, [pc, #232]	; (80008bc <MX_TIM1_Init+0x180>)
 80007d4:	f001 fd67 	bl	80022a6 <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007de:	f000 f91f 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ee:	4619      	mov	r1, r3
 80007f0:	4832      	ldr	r0, [pc, #200]	; (80008bc <MX_TIM1_Init+0x180>)
 80007f2:	f002 fadd 	bl	8002db0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007fc:	f000 f910 	bl	8000a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	4825      	ldr	r0, [pc, #148]	; (80008bc <MX_TIM1_Init+0x180>)
 8000826:	f001 fe9d 	bl	8002564 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000830:	f000 f8f6 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	2204      	movs	r2, #4
 800083a:	4619      	mov	r1, r3
 800083c:	481f      	ldr	r0, [pc, #124]	; (80008bc <MX_TIM1_Init+0x180>)
 800083e:	f001 fe91 	bl	8002564 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000848:	f000 f8ea 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800084c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000850:	2208      	movs	r2, #8
 8000852:	4619      	mov	r1, r3
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <MX_TIM1_Init+0x180>)
 8000856:	f001 fe85 	bl	8002564 <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000860:	f000 f8de 	bl	8000a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	220c      	movs	r2, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_TIM1_Init+0x180>)
 800086e:	f001 fe79 	bl	8002564 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000878:	f000 f8d2 	bl	8000a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM1_Init+0x180>)
 80008a0:	f002 fae4 	bl	8002e6c <HAL_TIMEx_ConfigBreakDeadTime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80008aa:	f000 f8b9 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM1_Init+0x180>)
 80008b0:	f000 f90c 	bl	8000acc <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3758      	adds	r7, #88	; 0x58
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000c8 	.word	0x200000c8
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f002 fb07 	bl	8002f0e <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f88b 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000002c 	.word	0x2000002c
 8000914:	40004400 	.word	0x40004400

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MX_GPIO_Init+0xf8>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a37      	ldr	r2, [pc, #220]	; (8000a10 <MX_GPIO_Init+0xf8>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_GPIO_Init+0xf8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <MX_GPIO_Init+0xf8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <MX_GPIO_Init+0xf8>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_GPIO_Init+0xf8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0320 	and.w	r3, r3, #32
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_GPIO_Init+0xf8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <MX_GPIO_Init+0xf8>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_GPIO_Init+0xf8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_GPIO_Init+0xf8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a25      	ldr	r2, [pc, #148]	; (8000a10 <MX_GPIO_Init+0xf8>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_GPIO_Init+0xf8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000992:	4820      	ldr	r0, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xfc>)
 8000994:	f001 f806 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f249 0130 	movw	r1, #36912	; 0x9030
 800099e:	481e      	ldr	r0, [pc, #120]	; (8000a18 <MX_GPIO_Init+0x100>)
 80009a0:	f001 f800 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2138      	movs	r1, #56	; 0x38
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <MX_GPIO_Init+0x104>)
 80009aa:	f000 fffb 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin YELLOW_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin;
 80009ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2302      	movs	r3, #2
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_GPIO_Init+0xfc>)
 80009c8:	f000 fe68 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15;
 80009cc:	f249 0330 	movw	r3, #36912	; 0x9030
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2302      	movs	r3, #2
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_GPIO_Init+0x100>)
 80009e6:	f000 fe59 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009ea:	2338      	movs	r3, #56	; 0x38
 80009ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_GPIO_Init+0x104>)
 8000a02:	f000 fe4b 	bl	800169c <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_MspInit+0x60>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_MspInit+0x60>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000

08000a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <HAL_TIM_Base_MspInit+0x34>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d10b      	bne.n	8000aba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_TIM_Base_MspInit+0x38>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_TIM_Base_MspInit+0x38>)
 8000aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_TIM_Base_MspInit+0x38>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <HAL_TIM_MspPostInit+0x5c>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d118      	bne.n	8000b1e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_TIM_MspPostInit+0x60>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_TIM_MspPostInit+0x60>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_TIM_MspPostInit+0x60>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000b04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_TIM_MspPostInit+0x64>)
 8000b1a:	f000 fdbf 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010800 	.word	0x40010800

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_UART_MspInit+0x98>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d137      	bne.n	8000bc4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5e:	61d3      	str	r3, [r2, #28]
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b84:	2304      	movs	r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4619      	mov	r1, r3
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b98:	f000 fd80 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000bb0:	f000 fd74 	bl	800169c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2026      	movs	r0, #38	; 0x26
 8000bba:	f000 fc88 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bbe:	2026      	movs	r0, #38	; 0x26
 8000bc0:	f000 fca1 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 fb63 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <USART2_IRQHandler+0x10>)
 8000c2e:	f002 f9eb 	bl	8003008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000002c 	.word	0x2000002c

08000c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <_Z11bldc_updatev>:
int32_t V3 = 0;
int32_t V4 = 0;
// タイマ用構造体変数
TIM_HandleTypeDef htim1;

void bldc_update(){
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	Vx = (LeftAxisX - 64)*250/64+708;
 8000c4c:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <_Z11bldc_updatev+0x1e8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3b40      	subs	r3, #64	; 0x40
 8000c52:	22fa      	movs	r2, #250	; 0xfa
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <_Z11bldc_updatev+0x16>
 8000c5c:	333f      	adds	r3, #63	; 0x3f
 8000c5e:	119b      	asrs	r3, r3, #6
 8000c60:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbc3 	bl	80003f0 <__aeabi_i2d>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	4971      	ldr	r1, [pc, #452]	; (8000e34 <_Z11bldc_updatev+0x1ec>)
 8000c70:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = (64 - LeftAxisY)*250/64+708;
 8000c74:	4b70      	ldr	r3, [pc, #448]	; (8000e38 <_Z11bldc_updatev+0x1f0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000c7c:	22fa      	movs	r2, #250	; 0xfa
 8000c7e:	fb02 f303 	mul.w	r3, r2, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da00      	bge.n	8000c88 <_Z11bldc_updatev+0x40>
 8000c86:	333f      	adds	r3, #63	; 0x3f
 8000c88:	119b      	asrs	r3, r3, #6
 8000c8a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fbae 	bl	80003f0 <__aeabi_i2d>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4968      	ldr	r1, [pc, #416]	; (8000e3c <_Z11bldc_updatev+0x1f4>)
 8000c9a:	e9c1 2300 	strd	r2, r3, [r1]

	v1 = (Vx-708) + (Vy-708)+708;
 8000c9e:	4b65      	ldr	r3, [pc, #404]	; (8000e34 <_Z11bldc_updatev+0x1ec>)
 8000ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b65      	ldr	r3, [pc, #404]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000caa:	f7ff fa53 	bl	8000154 <__aeabi_dsub>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4614      	mov	r4, r2
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <_Z11bldc_updatev+0x1f4>)
 8000cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b5f      	ldr	r3, [pc, #380]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000cc2:	f7ff fa47 	bl	8000154 <__aeabi_dsub>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4620      	mov	r0, r4
 8000ccc:	4629      	mov	r1, r5
 8000cce:	f7ff fa43 	bl	8000158 <__adddf3>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b58      	ldr	r3, [pc, #352]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000ce0:	f7ff fa3a 	bl	8000158 <__adddf3>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4956      	ldr	r1, [pc, #344]	; (8000e44 <_Z11bldc_updatev+0x1fc>)
 8000cea:	e9c1 2300 	strd	r2, r3, [r1]
	v2 = (Vx-708) - (Vy-708)+708;
 8000cee:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <_Z11bldc_updatev+0x1ec>)
 8000cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000cfa:	f7ff fa2b 	bl	8000154 <__aeabi_dsub>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4614      	mov	r4, r2
 8000d04:	461d      	mov	r5, r3
 8000d06:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <_Z11bldc_updatev+0x1f4>)
 8000d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000d12:	f7ff fa1f 	bl	8000154 <__aeabi_dsub>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	f7ff fa19 	bl	8000154 <__aeabi_dsub>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000d30:	f7ff fa12 	bl	8000158 <__adddf3>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4943      	ldr	r1, [pc, #268]	; (8000e48 <_Z11bldc_updatev+0x200>)
 8000d3a:	e9c1 2300 	strd	r2, r3, [r1]
	v3 = -((Vx-708) + (Vy-708))+708;
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <_Z11bldc_updatev+0x1ec>)
 8000d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000d4a:	f7ff fa03 	bl	8000154 <__aeabi_dsub>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4614      	mov	r4, r2
 8000d54:	461d      	mov	r5, r3
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <_Z11bldc_updatev+0x1f4>)
 8000d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000d62:	f7ff f9f7 	bl	8000154 <__aeabi_dsub>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	f7ff f9f3 	bl	8000158 <__adddf3>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	f04f 0000 	mov.w	r0, #0
 8000d7a:	4931      	ldr	r1, [pc, #196]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000d7c:	f7ff f9ea 	bl	8000154 <__aeabi_dsub>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4931      	ldr	r1, [pc, #196]	; (8000e4c <_Z11bldc_updatev+0x204>)
 8000d86:	e9c1 2300 	strd	r2, r3, [r1]
	v4 = -(Vx-708) + (Vy-708)+708;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <_Z11bldc_updatev+0x1f4>)
 8000d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000d96:	f7ff f9dd 	bl	8000154 <__aeabi_dsub>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4614      	mov	r4, r2
 8000da0:	461d      	mov	r5, r3
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <_Z11bldc_updatev+0x1ec>)
 8000da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000dae:	f7ff f9d1 	bl	8000154 <__aeabi_dsub>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4620      	mov	r0, r4
 8000db8:	4629      	mov	r1, r5
 8000dba:	f7ff f9cb 	bl	8000154 <__aeabi_dsub>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <_Z11bldc_updatev+0x1f8>)
 8000dcc:	f7ff f9c4 	bl	8000158 <__adddf3>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	491e      	ldr	r1, [pc, #120]	; (8000e50 <_Z11bldc_updatev+0x208>)
 8000dd6:	e9c1 2300 	strd	r2, r3, [r1]

	V1 = (int32_t)v1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <_Z11bldc_updatev+0x1fc>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fb6e 	bl	80004c4 <__aeabi_d2iz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <_Z11bldc_updatev+0x20c>)
 8000dec:	6013      	str	r3, [r2, #0]
	V2 = (int32_t)v2;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <_Z11bldc_updatev+0x200>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fb64 	bl	80004c4 <__aeabi_d2iz>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <_Z11bldc_updatev+0x210>)
 8000e00:	6013      	str	r3, [r2, #0]
	V3 = (int32_t)v3;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <_Z11bldc_updatev+0x204>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff fb5a 	bl	80004c4 <__aeabi_d2iz>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_Z11bldc_updatev+0x214>)
 8000e14:	6013      	str	r3, [r2, #0]
	V4 = (int32_t)v4;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <_Z11bldc_updatev+0x208>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fb50 	bl	80004c4 <__aeabi_d2iz>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <_Z11bldc_updatev+0x218>)
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000002 	.word	0x20000002
 8000e34:	20000088 	.word	0x20000088
 8000e38:	20000003 	.word	0x20000003
 8000e3c:	20000090 	.word	0x20000090
 8000e40:	40862000 	.word	0x40862000
 8000e44:	20000098 	.word	0x20000098
 8000e48:	200000a0 	.word	0x200000a0
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	200000b0 	.word	0x200000b0
 8000e54:	200000b8 	.word	0x200000b8
 8000e58:	200000bc 	.word	0x200000bc
 8000e5c:	200000c0 	.word	0x200000c0
 8000e60:	200000c4 	.word	0x200000c4

08000e64 <_Z6wheel1v>:

void wheel1(){
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	if(V1 >= 1000){
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <_Z6wheel1v+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e70:	db04      	blt.n	8000e7c <_Z6wheel1v+0x18>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 999);
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <_Z6wheel1v+0x44>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(V1 <= 499){
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <_Z6wheel1v+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e84:	da05      	bge.n	8000e92 <_Z6wheel1v+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 417);
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_Z6wheel1v+0x44>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, V1);
	}
}
 8000e90:	e004      	b.n	8000e9c <_Z6wheel1v+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, V1);
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <_Z6wheel1v+0x40>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <_Z6wheel1v+0x44>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	200000b8 	.word	0x200000b8
 8000ea8:	200000c8 	.word	0x200000c8

08000eac <_Z6wheel2v>:

void wheel2(){
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	if(V2 >= 1000){
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <_Z6wheel2v+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb8:	db04      	blt.n	8000ec4 <_Z6wheel2v+0x18>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 999);
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <_Z6wheel2v+0x44>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(V2 <= 499){
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <_Z6wheel2v+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ecc:	da05      	bge.n	8000eda <_Z6wheel2v+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 417);
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_Z6wheel2v+0x44>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, V2);
	}
}
 8000ed8:	e004      	b.n	8000ee4 <_Z6wheel2v+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, V2);
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <_Z6wheel2v+0x40>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <_Z6wheel2v+0x44>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	200000bc 	.word	0x200000bc
 8000ef0:	200000c8 	.word	0x200000c8

08000ef4 <_Z6wheel3v>:

void wheel3(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	if(V3 >= 1000){
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <_Z6wheel3v+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f00:	db04      	blt.n	8000f0c <_Z6wheel3v+0x18>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 999);
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <_Z6wheel3v+0x44>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f0a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if(V3 <= 499){
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <_Z6wheel3v+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f14:	da05      	bge.n	8000f22 <_Z6wheel3v+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 417);
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_Z6wheel3v+0x44>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, V3);
	}
}
 8000f20:	e004      	b.n	8000f2c <_Z6wheel3v+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, V3);
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <_Z6wheel3v+0x40>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <_Z6wheel3v+0x44>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	200000c0 	.word	0x200000c0
 8000f38:	200000c8 	.word	0x200000c8

08000f3c <_Z6wheel4v>:

void wheel4(){
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	if(V4 >= 1000){
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <_Z6wheel4v+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f48:	db04      	blt.n	8000f54 <_Z6wheel4v+0x18>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 999);
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <_Z6wheel4v+0x44>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if(V4 <= 499){
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <_Z6wheel4v+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f5c:	da05      	bge.n	8000f6a <_Z6wheel4v+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 417);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_Z6wheel4v+0x44>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, V4);
	}
}
 8000f68:	e004      	b.n	8000f74 <_Z6wheel4v+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, V4);
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <_Z6wheel4v+0x40>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <_Z6wheel4v+0x44>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	200000c4 	.word	0x200000c4
 8000f80:	200000c8 	.word	0x200000c8

08000f84 <main_cpp>:
// メイン関数
void main_cpp(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// UART開始
	HAL_UART_Receive_IT(&huart2, RxBuffer, 8);
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4996      	ldr	r1, [pc, #600]	; (80011e4 <main_cpp+0x260>)
 8000f8c:	4896      	ldr	r0, [pc, #600]	; (80011e8 <main_cpp+0x264>)
 8000f8e:	f002 f80b 	bl	8002fa8 <HAL_UART_Receive_IT>

	// LED緑を点灯
	HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f98:	4894      	ldr	r0, [pc, #592]	; (80011ec <main_cpp+0x268>)
 8000f9a:	f000 fd03 	bl	80019a4 <HAL_GPIO_WritePin>

	// 無効化後、黄色LEDを消灯、赤色LEDを点灯
	HAL_GPIO_WritePin(GPIOC, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa4:	4891      	ldr	r0, [pc, #580]	; (80011ec <main_cpp+0x268>)
 8000fa6:	f000 fcfd 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb0:	488e      	ldr	r0, [pc, #568]	; (80011ec <main_cpp+0x268>)
 8000fb2:	f000 fcf7 	bl	80019a4 <HAL_GPIO_WritePin>

	while(1){
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	488d      	ldr	r0, [pc, #564]	; (80011f0 <main_cpp+0x26c>)
 8000fba:	f001 f9cd 	bl	8002358 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	488b      	ldr	r0, [pc, #556]	; (80011f0 <main_cpp+0x26c>)
 8000fc2:	f001 f9c9 	bl	8002358 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	4889      	ldr	r0, [pc, #548]	; (80011f0 <main_cpp+0x26c>)
 8000fca:	f001 f9c5 	bl	8002358 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000fce:	210c      	movs	r1, #12
 8000fd0:	4887      	ldr	r0, [pc, #540]	; (80011f0 <main_cpp+0x26c>)
 8000fd2:	f001 f9c1 	bl	8002358 <HAL_TIM_PWM_Start>

		//パルス幅max
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 999);
 8000fd6:	4b86      	ldr	r3, [pc, #536]	; (80011f0 <main_cpp+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 999);
 8000fe0:	4b83      	ldr	r3, [pc, #524]	; (80011f0 <main_cpp+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 999);
 8000fea:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <main_cpp+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 999);
 8000ff4:	4b7e      	ldr	r3, [pc, #504]	; (80011f0 <main_cpp+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38

		if(A == 1){
 8000ffe:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <main_cpp+0x270>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d000      	beq.n	8001008 <main_cpp+0x84>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001006:	e7d6      	b.n	8000fb6 <main_cpp+0x32>
			//電源付けてから3sec以内にAを押す
			break;
 8001008:	bf00      	nop
	}

	//HAL_Delay(100);

	//パルス幅min
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 417);
 800100a:	4b79      	ldr	r3, [pc, #484]	; (80011f0 <main_cpp+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 417);
 8001014:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <main_cpp+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f240 12a1 	movw	r2, #417	; 0x1a1
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 417);
 800101e:	4b74      	ldr	r3, [pc, #464]	; (80011f0 <main_cpp+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 417);
 8001028:	4b71      	ldr	r3, [pc, #452]	; (80011f0 <main_cpp+0x26c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001030:	639a      	str	r2, [r3, #56]	; 0x38

	// 有効化後、黄色LEDを点灯、赤色LEDを消灯
	HAL_GPIO_WritePin(GPIOC, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	486c      	ldr	r0, [pc, #432]	; (80011ec <main_cpp+0x268>)
 800103a:	f000 fcb3 	bl	80019a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001044:	4869      	ldr	r0, [pc, #420]	; (80011ec <main_cpp+0x268>)
 8001046:	f000 fcad 	bl	80019a4 <HAL_GPIO_WritePin>

	//ちょっと待つ
	//HAL_Delay(100);

	//回らないようにする
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 708);
 800104a:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <main_cpp+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 708);
 8001054:	4b66      	ldr	r3, [pc, #408]	; (80011f0 <main_cpp+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 708);
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <main_cpp+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8001066:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 708);
 8001068:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <main_cpp+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8001070:	639a      	str	r2, [r3, #56]	; 0x38
	// メインループ
	while(1)
	{

		// もし、BACKボタンが押されている(BACK == 1)なら、
		if(BACK == 1)
 8001072:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <main_cpp+0x274>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d121      	bne.n	80010be <main_cpp+0x13a>
		{

			// 無効化後、黄色LEDを消灯、赤色LEDを点灯
			HAL_GPIO_WritePin(GPIOC, YELLOW_LED_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001080:	485a      	ldr	r0, [pc, #360]	; (80011ec <main_cpp+0x268>)
 8001082:	f000 fc8f 	bl	80019a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	4857      	ldr	r0, [pc, #348]	; (80011ec <main_cpp+0x268>)
 800108e:	f000 fc89 	bl	80019a4 <HAL_GPIO_WritePin>

			// LED緑を点灯
			HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001098:	4854      	ldr	r0, [pc, #336]	; (80011ec <main_cpp+0x268>)
 800109a:	f000 fc83 	bl	80019a4 <HAL_GPIO_WritePin>

			//PWM無効化
			//tim1
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 800109e:	2100      	movs	r1, #0
 80010a0:	4853      	ldr	r0, [pc, #332]	; (80011f0 <main_cpp+0x26c>)
 80010a2:	f001 f9fb 	bl	800249c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 80010a6:	2104      	movs	r1, #4
 80010a8:	4851      	ldr	r0, [pc, #324]	; (80011f0 <main_cpp+0x26c>)
 80010aa:	f001 f9f7 	bl	800249c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 80010ae:	2108      	movs	r1, #8
 80010b0:	484f      	ldr	r0, [pc, #316]	; (80011f0 <main_cpp+0x26c>)
 80010b2:	f001 f9f3 	bl	800249c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 80010b6:	210c      	movs	r1, #12
 80010b8:	484d      	ldr	r0, [pc, #308]	; (80011f0 <main_cpp+0x26c>)
 80010ba:	f001 f9ef 	bl	800249c <HAL_TIM_PWM_Stop>


		}

		// もし、STARTボタンが押されている(START == 1)なら、
		if(START == 1)
 80010be:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <main_cpp+0x278>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d121      	bne.n	800110a <main_cpp+0x186>
		{
			// 有効化後、黄色LEDを点灯、赤色LEDを消灯
			HAL_GPIO_WritePin(GPIOC, YELLOW_LED_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010cc:	4847      	ldr	r0, [pc, #284]	; (80011ec <main_cpp+0x268>)
 80010ce:	f000 fc69 	bl	80019a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LED_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <main_cpp+0x268>)
 80010da:	f000 fc63 	bl	80019a4 <HAL_GPIO_WritePin>

			// LED緑を点灯
			HAL_GPIO_WritePin(GPIOC, GREEN_LED_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e4:	4841      	ldr	r0, [pc, #260]	; (80011ec <main_cpp+0x268>)
 80010e6:	f000 fc5d 	bl	80019a4 <HAL_GPIO_WritePin>

			//PWM有効化
			//tim1
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80010ea:	2100      	movs	r1, #0
 80010ec:	4840      	ldr	r0, [pc, #256]	; (80011f0 <main_cpp+0x26c>)
 80010ee:	f001 f933 	bl	8002358 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80010f2:	2104      	movs	r1, #4
 80010f4:	483e      	ldr	r0, [pc, #248]	; (80011f0 <main_cpp+0x26c>)
 80010f6:	f001 f92f 	bl	8002358 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80010fa:	2108      	movs	r1, #8
 80010fc:	483c      	ldr	r0, [pc, #240]	; (80011f0 <main_cpp+0x26c>)
 80010fe:	f001 f92b 	bl	8002358 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001102:	210c      	movs	r1, #12
 8001104:	483a      	ldr	r0, [pc, #232]	; (80011f0 <main_cpp+0x26c>)
 8001106:	f001 f927 	bl	8002358 <HAL_TIM_PWM_Start>
		}

		//コントローラーの値を取得、いい感じに計算
		bldc_update();
 800110a:	f7ff fd9d 	bl	8000c48 <_Z11bldc_updatev>

		wheel1();
 800110e:	f7ff fea9 	bl	8000e64 <_Z6wheel1v>
		wheel2();
 8001112:	f7ff fecb 	bl	8000eac <_Z6wheel2v>
		wheel3();
 8001116:	f7ff feed 	bl	8000ef4 <_Z6wheel3v>
		wheel4();
 800111a:	f7ff ff0f 	bl	8000f3c <_Z6wheel4v>

		if(L1 == 1){
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <main_cpp+0x27c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d113      	bne.n	800114e <main_cpp+0x1ca>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 550);
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <main_cpp+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f240 2226 	movw	r2, #550	; 0x226
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 550);
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <main_cpp+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f240 2226 	movw	r2, #550	; 0x226
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 550);
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <main_cpp+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f240 2226 	movw	r2, #550	; 0x226
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 550);
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <main_cpp+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f240 2226 	movw	r2, #550	; 0x226
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(R1 == 1){
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <main_cpp+0x280>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d113      	bne.n	800117e <main_cpp+0x1fa>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 850);
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <main_cpp+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f240 3252 	movw	r2, #850	; 0x352
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 850);
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <main_cpp+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f240 3252 	movw	r2, #850	; 0x352
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 850);
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <main_cpp+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f240 3252 	movw	r2, #850	; 0x352
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 850);
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <main_cpp+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f240 3252 	movw	r2, #850	; 0x352
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
		}

		//初期化ダンス用？？？？
		if(L2 == 1){
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <main_cpp+0x284>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d113      	bne.n	80011ae <main_cpp+0x22a>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 417);
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <main_cpp+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f240 12a1 	movw	r2, #417	; 0x1a1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 417);
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <main_cpp+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f240 12a1 	movw	r2, #417	; 0x1a1
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 417);
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <main_cpp+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f240 12a1 	movw	r2, #417	; 0x1a1
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 417);
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <main_cpp+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f240 12a1 	movw	r2, #417	; 0x1a1
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(R2 == 1){
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <main_cpp+0x288>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f47f af5d 	bne.w	8001072 <main_cpp+0xee>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 999);
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <main_cpp+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 999);
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <main_cpp+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 999);
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <main_cpp+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 999);
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <main_cpp+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
		if(BACK == 1)
 80011e0:	e747      	b.n	8001072 <main_cpp+0xee>
 80011e2:	bf00      	nop
 80011e4:	20000070 	.word	0x20000070
 80011e8:	2000002c 	.word	0x2000002c
 80011ec:	40011000 	.word	0x40011000
 80011f0:	200000c8 	.word	0x200000c8
 80011f4:	20000079 	.word	0x20000079
 80011f8:	20000085 	.word	0x20000085
 80011fc:	20000084 	.word	0x20000084
 8001200:	20000082 	.word	0x20000082
 8001204:	20000080 	.word	0x20000080
 8001208:	20000083 	.word	0x20000083
 800120c:	20000081 	.word	0x20000081

08001210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001236:	f7ff fd01 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f002 fac3 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff fa29 	bl	8000694 <main>
  bx lr
 8001242:	4770      	bx	lr
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800124c:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8001250:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001254:	20000114 	.word	0x20000114

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_Init+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_Init+0x28>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f923 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fbd8 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f93b 	bl	8001522 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f903 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000004 	.word	0x20000004
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_IncTick+0x1c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_IncTick+0x20>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	2000000c 	.word	0x2000000c
 8001308:	20000110 	.word	0x20000110

0800130c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <HAL_GetTick+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000110 	.word	0x20000110

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4906      	ldr	r1, [pc, #24]	; (80013b8 <__NVIC_EnableIRQ+0x34>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff90 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff2d 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff42 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff35 	bl	8001384 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154c:	2b02      	cmp	r3, #2
 800154e:	d008      	beq.n	8001562 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2204      	movs	r2, #4
 8001554:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e020      	b.n	80015a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 020e 	bic.w	r2, r2, #14
 8001570:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d005      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2204      	movs	r2, #4
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e051      	b.n	8001676 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020e 	bic.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <HAL_DMA_Abort_IT+0xd0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d029      	beq.n	8001650 <HAL_DMA_Abort_IT+0xa0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <HAL_DMA_Abort_IT+0xd4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d022      	beq.n	800164c <HAL_DMA_Abort_IT+0x9c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_DMA_Abort_IT+0xd8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d01a      	beq.n	8001646 <HAL_DMA_Abort_IT+0x96>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_DMA_Abort_IT+0xdc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d012      	beq.n	8001640 <HAL_DMA_Abort_IT+0x90>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_DMA_Abort_IT+0xe0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00a      	beq.n	800163a <HAL_DMA_Abort_IT+0x8a>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_DMA_Abort_IT+0xe4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d102      	bne.n	8001634 <HAL_DMA_Abort_IT+0x84>
 800162e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001632:	e00e      	b.n	8001652 <HAL_DMA_Abort_IT+0xa2>
 8001634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001638:	e00b      	b.n	8001652 <HAL_DMA_Abort_IT+0xa2>
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	e008      	b.n	8001652 <HAL_DMA_Abort_IT+0xa2>
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	e005      	b.n	8001652 <HAL_DMA_Abort_IT+0xa2>
 8001646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164a:	e002      	b.n	8001652 <HAL_DMA_Abort_IT+0xa2>
 800164c:	2310      	movs	r3, #16
 800164e:	e000      	b.n	8001652 <HAL_DMA_Abort_IT+0xa2>
 8001650:	2301      	movs	r3, #1
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_DMA_Abort_IT+0xe8>)
 8001654:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
    } 
  }
  return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020008 	.word	0x40020008
 8001684:	4002001c 	.word	0x4002001c
 8001688:	40020030 	.word	0x40020030
 800168c:	40020044 	.word	0x40020044
 8001690:	40020058 	.word	0x40020058
 8001694:	4002006c 	.word	0x4002006c
 8001698:	40020000 	.word	0x40020000

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e169      	b.n	8001984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b0:	2201      	movs	r2, #1
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8158 	bne.w	800197e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a9a      	ldr	r2, [pc, #616]	; (800193c <HAL_GPIO_Init+0x2a0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d05e      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016d8:	4a98      	ldr	r2, [pc, #608]	; (800193c <HAL_GPIO_Init+0x2a0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d875      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016de:	4a98      	ldr	r2, [pc, #608]	; (8001940 <HAL_GPIO_Init+0x2a4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d058      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016e4:	4a96      	ldr	r2, [pc, #600]	; (8001940 <HAL_GPIO_Init+0x2a4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d86f      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016ea:	4a96      	ldr	r2, [pc, #600]	; (8001944 <HAL_GPIO_Init+0x2a8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d052      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016f0:	4a94      	ldr	r2, [pc, #592]	; (8001944 <HAL_GPIO_Init+0x2a8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d869      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016f6:	4a94      	ldr	r2, [pc, #592]	; (8001948 <HAL_GPIO_Init+0x2ac>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d04c      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016fc:	4a92      	ldr	r2, [pc, #584]	; (8001948 <HAL_GPIO_Init+0x2ac>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d863      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001702:	4a92      	ldr	r2, [pc, #584]	; (800194c <HAL_GPIO_Init+0x2b0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d046      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 8001708:	4a90      	ldr	r2, [pc, #576]	; (800194c <HAL_GPIO_Init+0x2b0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d85d      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d82a      	bhi.n	8001768 <HAL_GPIO_Init+0xcc>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d859      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_GPIO_Init+0x80>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001797 	.word	0x08001797
 8001720:	08001771 	.word	0x08001771
 8001724:	08001783 	.word	0x08001783
 8001728:	080017c5 	.word	0x080017c5
 800172c:	080017cb 	.word	0x080017cb
 8001730:	080017cb 	.word	0x080017cb
 8001734:	080017cb 	.word	0x080017cb
 8001738:	080017cb 	.word	0x080017cb
 800173c:	080017cb 	.word	0x080017cb
 8001740:	080017cb 	.word	0x080017cb
 8001744:	080017cb 	.word	0x080017cb
 8001748:	080017cb 	.word	0x080017cb
 800174c:	080017cb 	.word	0x080017cb
 8001750:	080017cb 	.word	0x080017cb
 8001754:	080017cb 	.word	0x080017cb
 8001758:	080017cb 	.word	0x080017cb
 800175c:	080017cb 	.word	0x080017cb
 8001760:	08001779 	.word	0x08001779
 8001764:	0800178d 	.word	0x0800178d
 8001768:	4a79      	ldr	r2, [pc, #484]	; (8001950 <HAL_GPIO_Init+0x2b4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800176e:	e02c      	b.n	80017ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e029      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	3304      	adds	r3, #4
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e024      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	3308      	adds	r3, #8
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e01f      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	330c      	adds	r3, #12
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e01a      	b.n	80017cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179e:	2304      	movs	r3, #4
 80017a0:	623b      	str	r3, [r7, #32]
          break;
 80017a2:	e013      	b.n	80017cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	611a      	str	r2, [r3, #16]
          break;
 80017b6:	e009      	b.n	80017cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	615a      	str	r2, [r3, #20]
          break;
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
          break;
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x130>
          break;
 80017ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2bff      	cmp	r3, #255	; 0xff
 80017d0:	d801      	bhi.n	80017d6 <HAL_GPIO_Init+0x13a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	e001      	b.n	80017da <HAL_GPIO_Init+0x13e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3304      	adds	r3, #4
 80017da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d802      	bhi.n	80017e8 <HAL_GPIO_Init+0x14c>
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x152>
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3b08      	subs	r3, #8
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	210f      	movs	r1, #15
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	6a39      	ldr	r1, [r7, #32]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80b1 	beq.w	800197e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001834:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_GPIO_Init+0x2bc>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a40      	ldr	r2, [pc, #256]	; (800195c <HAL_GPIO_Init+0x2c0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a3e      	ldr	r2, [pc, #248]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1e0>
 8001878:	2303      	movs	r3, #3
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 800187c:	2304      	movs	r3, #4
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001888:	2300      	movs	r3, #0
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189a:	492f      	ldr	r1, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x2bc>)
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	492c      	ldr	r1, [pc, #176]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4928      	ldr	r1, [pc, #160]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4922      	ldr	r1, [pc, #136]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	491e      	ldr	r1, [pc, #120]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4918      	ldr	r1, [pc, #96]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4914      	ldr	r1, [pc, #80]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d021      	beq.n	8001970 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e021      	b.n	800197e <HAL_GPIO_Init+0x2e2>
 800193a:	bf00      	nop
 800193c:	10320000 	.word	0x10320000
 8001940:	10310000 	.word	0x10310000
 8001944:	10220000 	.word	0x10220000
 8001948:	10210000 	.word	0x10210000
 800194c:	10120000 	.word	0x10120000
 8001950:	10110000 	.word	0x10110000
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40011000 	.word	0x40011000
 8001968:	40011400 	.word	0x40011400
 800196c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	43db      	mvns	r3, r3
 8001978:	4909      	ldr	r1, [pc, #36]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800197a:	4013      	ands	r3, r2
 800197c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	3301      	adds	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f47f ae8e 	bne.w	80016b0 <HAL_GPIO_Init+0x14>
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	372c      	adds	r7, #44	; 0x2c
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e26c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8087 	beq.w	8001b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f4:	4b92      	ldr	r3, [pc, #584]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d00c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a00:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x12c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d168      	bne.n	8001b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e246      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x76>
 8001a3c:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a7f      	ldr	r2, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e02e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x98>
 8001a52:	4b7b      	ldr	r3, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7a      	ldr	r2, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0xbc>
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a71      	ldr	r2, [pc, #452]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fc2c 	bl	800130c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fc28 	bl	800130c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1fa      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe4>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fc18 	bl	800130c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fc14 	bl	800130c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1e6      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x10c>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
 8001b26:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1ba      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4939      	ldr	r1, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e03a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fbcd 	bl	800130c <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff fbc9 	bl	800130c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e19b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fbac 	bl	800130c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fba8 	bl	800130c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e17a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d03a      	beq.n	8001c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fb8c 	bl	800130c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fb88 	bl	800130c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e15a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 fad8 	bl	80021cc <RCC_Delay>
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7ff fb72 	bl	800130c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff fb6e 	bl	800130c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d908      	bls.n	8001c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e140      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	42420000 	.word	0x42420000
 8001c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b9e      	ldr	r3, [pc, #632]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e9      	bne.n	8001c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80a6 	beq.w	8001db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b97      	ldr	r3, [pc, #604]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b94      	ldr	r3, [pc, #592]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a93      	ldr	r2, [pc, #588]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b91      	ldr	r3, [pc, #580]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b8e      	ldr	r3, [pc, #568]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a8a      	ldr	r2, [pc, #552]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fb2f 	bl	800130c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff fb2b 	bl	800130c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	; 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0fd      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b81      	ldr	r3, [pc, #516]	; (8001ecc <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x312>
 8001cd8:	4b7b      	ldr	r3, [pc, #492]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x334>
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a72      	ldr	r2, [pc, #456]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	e01c      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x356>
 8001d10:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a6c      	ldr	r2, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a69      	ldr	r2, [pc, #420]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e00b      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a66      	ldr	r2, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a63      	ldr	r2, [pc, #396]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fadf 	bl	800130c <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fadb 	bl	800130c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0ab      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCC_OscConfig+0x37e>
 8001d74:	e014      	b.n	8001da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fac9 	bl	800130c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fac5 	bl	800130c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e095      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8081 	beq.w	8001ebe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d061      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d146      	bne.n	8001e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_OscConfig+0x4fc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fa99 	bl	800130c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff fa95 	bl	800130c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e067      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d108      	bne.n	8001e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	492d      	ldr	r1, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a19      	ldr	r1, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	4927      	ldr	r1, [pc, #156]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_OscConfig+0x4fc>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff fa69 	bl	800130c <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff fa65 	bl	800130c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e037      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46a>
 8001e5c:	e02f      	b.n	8001ebe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_RCC_OscConfig+0x4fc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fa52 	bl	800130c <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff fa4e 	bl	800130c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e020      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x498>
 8001e8a:	e018      	b.n	8001ebe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e013      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	42420060 	.word	0x42420060

08001ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0d0      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4965      	ldr	r1, [pc, #404]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d040      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d115      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e073      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06b      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4936      	ldr	r1, [pc, #216]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f9a2 	bl	800130c <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f99e 	bl	800130c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e053      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d210      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4922      	ldr	r1, [pc, #136]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f821 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1cc>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f900 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
 800209c:	08003844 	.word	0x08003844
 80020a0:	20000004 	.word	0x20000004
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b490      	push	{r4, r7}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020b0:	1d3c      	adds	r4, r7, #4
 80020b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b8:	f240 2301 	movw	r3, #513	; 0x201
 80020bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x40>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x46>
 80020e6:	e02d      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	e02d      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020fa:	4413      	add	r3, r2
 80020fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002100:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_GetSysClockFreq+0xb4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0c5b      	lsrs	r3, r3, #17
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800211a:	4413      	add	r3, r2
 800211c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002120:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002126:	fb02 f203 	mul.w	r2, r2, r3
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e004      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	623b      	str	r3, [r7, #32]
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002146:	623b      	str	r3, [r7, #32]
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	6a3b      	ldr	r3, [r7, #32]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bc90      	pop	{r4, r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	08003834 	.word	0x08003834
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08003854 	.word	0x08003854

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffde 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0adb      	lsrs	r3, r3, #11
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08003854 	.word	0x08003854

080021cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <RCC_Delay+0x34>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <RCC_Delay+0x38>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0a5b      	lsrs	r3, r3, #9
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e8:	bf00      	nop
  }
  while (Delay --);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	60fa      	str	r2, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f9      	bne.n	80021e8 <RCC_Delay+0x1c>
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000004 	.word	0x20000004
 8002204:	10624dd3 	.word	0x10624dd3

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e041      	b.n	800229e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fc2e 	bl	8000a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 fb0e 	bl	8002868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e041      	b.n	800233c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f839 	bl	8002344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 fabf 	bl	8002868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_TIM_PWM_Start+0x24>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e022      	b.n	80023c2 <HAL_TIM_PWM_Start+0x6a>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d109      	bne.n	8002396 <HAL_TIM_PWM_Start+0x3e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	bf14      	ite	ne
 800238e:	2301      	movne	r3, #1
 8002390:	2300      	moveq	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e015      	b.n	80023c2 <HAL_TIM_PWM_Start+0x6a>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d109      	bne.n	80023b0 <HAL_TIM_PWM_Start+0x58>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e008      	b.n	80023c2 <HAL_TIM_PWM_Start+0x6a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e05e      	b.n	8002488 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Start+0x82>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	e013      	b.n	8002402 <HAL_TIM_PWM_Start+0xaa>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d104      	bne.n	80023ea <HAL_TIM_PWM_Start+0x92>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e8:	e00b      	b.n	8002402 <HAL_TIM_PWM_Start+0xaa>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_PWM_Start+0xa2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f8:	e003      	b.n	8002402 <HAL_TIM_PWM_Start+0xaa>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fcac 	bl	8002d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <HAL_TIM_PWM_Start+0x138>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d107      	bne.n	800242a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_TIM_PWM_Start+0x138>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00e      	beq.n	8002452 <HAL_TIM_PWM_Start+0xfa>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d009      	beq.n	8002452 <HAL_TIM_PWM_Start+0xfa>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_TIM_PWM_Start+0x13c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_TIM_PWM_Start+0xfa>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_TIM_PWM_Start+0x140>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d010      	beq.n	8002486 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002474:	e007      	b.n	8002486 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800

0800249c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fc5a 	bl	8002d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_TIM_PWM_Stop+0xc4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d117      	bne.n	80024ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <HAL_TIM_PWM_Stop+0x52>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	f240 4344 	movw	r3, #1092	; 0x444
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_TIM_PWM_Stop+0x52>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_TIM_PWM_Stop+0x82>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	f240 4344 	movw	r3, #1092	; 0x444
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_TIM_PWM_Stop+0x82>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_TIM_PWM_Stop+0x92>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800252c:	e013      	b.n	8002556 <HAL_TIM_PWM_Stop+0xba>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d104      	bne.n	800253e <HAL_TIM_PWM_Stop+0xa2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800253c:	e00b      	b.n	8002556 <HAL_TIM_PWM_Stop+0xba>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d104      	bne.n	800254e <HAL_TIM_PWM_Stop+0xb2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800254c:	e003      	b.n	8002556 <HAL_TIM_PWM_Stop+0xba>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40012c00 	.word	0x40012c00

08002564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800257a:	2302      	movs	r3, #2
 800257c:	e0ac      	b.n	80026d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	f200 809f 	bhi.w	80026cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025c9 	.word	0x080025c9
 8002598:	080026cd 	.word	0x080026cd
 800259c:	080026cd 	.word	0x080026cd
 80025a0:	080026cd 	.word	0x080026cd
 80025a4:	08002609 	.word	0x08002609
 80025a8:	080026cd 	.word	0x080026cd
 80025ac:	080026cd 	.word	0x080026cd
 80025b0:	080026cd 	.word	0x080026cd
 80025b4:	0800264b 	.word	0x0800264b
 80025b8:	080026cd 	.word	0x080026cd
 80025bc:	080026cd 	.word	0x080026cd
 80025c0:	080026cd 	.word	0x080026cd
 80025c4:	0800268b 	.word	0x0800268b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f9ac 	bl	800292c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
      break;
 8002606:	e062      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f9f2 	bl	80029f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
      break;
 8002648:	e041      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fa3b 	bl	8002acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0208 	orr.w	r2, r2, #8
 8002664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0204 	bic.w	r2, r2, #4
 8002674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	61da      	str	r2, [r3, #28]
      break;
 8002688:	e021      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa85 	bl	8002ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	61da      	str	r2, [r3, #28]
      break;
 80026ca:	e000      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80026cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0b3      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x180>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002730:	d03e      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0xd0>
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	f200 8087 	bhi.w	8002848 <HAL_TIM_ConfigClockSource+0x168>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	f000 8085 	beq.w	800284c <HAL_TIM_ConfigClockSource+0x16c>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d87f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d01a      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xa2>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d87b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d050      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x116>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d877      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002758:	2b50      	cmp	r3, #80	; 0x50
 800275a:	d03c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xf6>
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d873      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d058      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x136>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d86f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d064      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d86b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d060      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d867      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d05a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002780:	e062      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f000 faca 	bl	8002d2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
      break;
 80027ae:	e04e      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f000 fab3 	bl	8002d2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e03b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 fa2a 	bl	8002c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2150      	movs	r1, #80	; 0x50
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa81 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 80027f4:	e02b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	461a      	mov	r2, r3
 8002804:	f000 fa48 	bl	8002c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2160      	movs	r1, #96	; 0x60
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fa71 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 8002814:	e01b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f000 fa0a 	bl	8002c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fa61 	bl	8002cf6 <TIM_ITRx_SetConfig>
      break;
 8002834:	e00b      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 fa58 	bl	8002cf6 <TIM_ITRx_SetConfig>
        break;
 8002846:	e002      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002848:	bf00      	nop
 800284a:	e000      	b.n	800284e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800284c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a29      	ldr	r2, [pc, #164]	; (8002920 <TIM_Base_SetConfig+0xb8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0x30>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x30>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a26      	ldr	r2, [pc, #152]	; (8002924 <TIM_Base_SetConfig+0xbc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x30>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a25      	ldr	r2, [pc, #148]	; (8002928 <TIM_Base_SetConfig+0xc0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <TIM_Base_SetConfig+0xb8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00b      	beq.n	80028ca <TIM_Base_SetConfig+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d007      	beq.n	80028ca <TIM_Base_SetConfig+0x62>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <TIM_Base_SetConfig+0xbc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_Base_SetConfig+0x62>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <TIM_Base_SetConfig+0xc0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a07      	ldr	r2, [pc, #28]	; (8002920 <TIM_Base_SetConfig+0xb8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d103      	bne.n	8002910 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	615a      	str	r2, [r3, #20]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800

0800292c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0201 	bic.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 0302 	bic.w	r3, r3, #2
 8002974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <TIM_OC1_SetConfig+0xc8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10c      	bne.n	80029a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0308 	bic.w	r3, r3, #8
 800298e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <TIM_OC1_SetConfig+0xc8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d111      	bne.n	80029ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40012c00 	.word	0x40012c00

080029f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0210 	bic.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0320 	bic.w	r3, r3, #32
 8002a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <TIM_OC2_SetConfig+0xd0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10d      	bne.n	8002a74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <TIM_OC2_SetConfig+0xd0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d113      	bne.n	8002aa4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00

08002acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <TIM_OC3_SetConfig+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10d      	bne.n	8002b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <TIM_OC3_SetConfig+0xd0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d113      	bne.n	8002b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	621a      	str	r2, [r3, #32]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40012c00 	.word	0x40012c00

08002ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	031b      	lsls	r3, r3, #12
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <TIM_OC4_SetConfig+0x98>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012c00 	.word	0x40012c00

08002c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f023 0201 	bic.w	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f023 030a 	bic.w	r3, r3, #10
 8002c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	621a      	str	r2, [r3, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 0210 	bic.w	r2, r3, #16
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	031b      	lsls	r3, r3, #12
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	621a      	str	r2, [r3, #32]
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f043 0307 	orr.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	021a      	lsls	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	609a      	str	r2, [r3, #8]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e046      	b.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d009      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10c      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800

08002e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e03d      	b.n	8002f04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e03f      	b.n	8002fa0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fd fdfd 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fba8 	bl	80036a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d11d      	bne.n	8002ffe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_UART_Receive_IT+0x26>
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e016      	b.n	8003000 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Receive_IT+0x38>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e00f      	b.n	8003000 <HAL_UART_Receive_IT+0x58>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f9ce 	bl	8003396 <UART_Start_Receive_IT>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	e000      	b.n	8003000 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10d      	bne.n	800305a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_UART_IRQHandler+0x52>
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa7f 	bl	8003556 <UART_Receive_IT>
      return;
 8003058:	e17b      	b.n	8003352 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80b1 	beq.w	80031c4 <HAL_UART_IRQHandler+0x1bc>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_UART_IRQHandler+0x70>
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a6 	beq.w	80031c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_UART_IRQHandler+0x90>
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_UART_IRQHandler+0xb0>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f043 0202 	orr.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_UART_IRQHandler+0xd0>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	f043 0204 	orr.w	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00f      	beq.n	8003102 <HAL_UART_IRQHandler+0xfa>
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_UART_IRQHandler+0xee>
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f043 0208 	orr.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 811e 	beq.w	8003348 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_UART_IRQHandler+0x11e>
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fa18 	bl	8003556 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <HAL_UART_IRQHandler+0x146>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d031      	beq.n	80031b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f95a 	bl	8003408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d023      	beq.n	80031aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003170:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	2b00      	cmp	r3, #0
 8003178:	d013      	beq.n	80031a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	4a76      	ldr	r2, [pc, #472]	; (8003358 <HAL_UART_IRQHandler+0x350>)
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fa12 	bl	80015b0 <HAL_DMA_Abort_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800319c:	4610      	mov	r0, r2
 800319e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00e      	b.n	80031c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8e3 	bl	800336e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e00a      	b.n	80031c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8df 	bl	800336e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	e006      	b.n	80031c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8db 	bl	800336e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031be:	e0c3      	b.n	8003348 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	bf00      	nop
    return;
 80031c2:	e0c1      	b.n	8003348 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 80a1 	bne.w	8003310 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 809b 	beq.w	8003310 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8095 	beq.w	8003310 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04e      	beq.n	80032a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003214:	8a3b      	ldrh	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8098 	beq.w	800334c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003220:	8a3a      	ldrh	r2, [r7, #16]
 8003222:	429a      	cmp	r2, r3
 8003224:	f080 8092 	bcs.w	800334c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8a3a      	ldrh	r2, [r7, #16]
 800322c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b20      	cmp	r3, #32
 8003236:	d02b      	beq.n	8003290 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003246:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003266:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0210 	bic.w	r2, r2, #16
 8003284:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe f955 	bl	800153a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003298:	b29b      	uxth	r3, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	b29b      	uxth	r3, r3
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f86d 	bl	8003380 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032a6:	e051      	b.n	800334c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d047      	beq.n	8003350 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80032c0:	8a7b      	ldrh	r3, [r7, #18]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d044      	beq.n	8003350 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0210 	bic.w	r2, r2, #16
 8003302:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003304:	8a7b      	ldrh	r3, [r7, #18]
 8003306:	4619      	mov	r1, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f839 	bl	8003380 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800330e:	e01f      	b.n	8003350 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_UART_IRQHandler+0x324>
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8af 	bl	8003488 <UART_Transmit_IT>
    return;
 800332a:	e012      	b.n	8003352 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_UART_IRQHandler+0x34a>
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f8f0 	bl	8003526 <UART_EndTransmit_IT>
    return;
 8003346:	e004      	b.n	8003352 <HAL_UART_IRQHandler+0x34a>
    return;
 8003348:	bf00      	nop
 800334a:	e002      	b.n	8003352 <HAL_UART_IRQHandler+0x34a>
      return;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <HAL_UART_IRQHandler+0x34a>
      return;
 8003350:	bf00      	nop
  }
}
 8003352:	3728      	adds	r7, #40	; 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08003461 	.word	0x08003461

0800335c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	88fa      	ldrh	r2, [r7, #6]
 80033ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2222      	movs	r2, #34	; 0x22
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033da:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0220 	orr.w	r2, r2, #32
 80033fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800341e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	2b01      	cmp	r3, #1
 8003436:	d107      	bne.n	8003448 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0210 	bic.w	r2, r2, #16
 8003446:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff ff77 	bl	800336e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b21      	cmp	r3, #33	; 0x21
 800349a:	d13e      	bne.n	800351a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a4:	d114      	bne.n	80034d0 <UART_Transmit_IT+0x48>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d110      	bne.n	80034d0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	621a      	str	r2, [r3, #32]
 80034ce:	e008      	b.n	80034e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	1c59      	adds	r1, r3, #1
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6211      	str	r1, [r2, #32]
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4619      	mov	r1, r3
 80034f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10f      	bne.n	8003516 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003504:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ff08 	bl	800335c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b22      	cmp	r3, #34	; 0x22
 8003568:	f040 8099 	bne.w	800369e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003574:	d117      	bne.n	80035a6 <UART_Receive_IT+0x50>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d113      	bne.n	80035a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	b29a      	uxth	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	1c9a      	adds	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
 80035a4:	e026      	b.n	80035f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d007      	beq.n	80035ca <UART_Receive_IT+0x74>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <UART_Receive_IT+0x82>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e008      	b.n	80035ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4619      	mov	r1, r3
 8003602:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003604:	2b00      	cmp	r3, #0
 8003606:	d148      	bne.n	800369a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0220 	bic.w	r2, r2, #32
 8003616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	2b01      	cmp	r3, #1
 8003646:	d123      	bne.n	8003690 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0210 	bic.w	r2, r2, #16
 800365c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d10a      	bne.n	8003682 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fe79 	bl	8003380 <HAL_UARTEx_RxEventCallback>
 800368e:	e002      	b.n	8003696 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fc ff3f 	bl	8000514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e002      	b.n	80036a0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036e2:	f023 030c 	bic.w	r3, r3, #12
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2c      	ldr	r2, [pc, #176]	; (80037bc <UART_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d103      	bne.n	8003718 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7fe fd48 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	e002      	b.n	800371e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003718:	f7fe fd30 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 800371c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009a      	lsls	r2, r3, #2
 8003728:	441a      	add	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <UART_SetConfig+0x118>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	0119      	lsls	r1, r3, #4
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009a      	lsls	r2, r3, #2
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fbb2 f2f3 	udiv	r2, r2, r3
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <UART_SetConfig+0x118>)
 8003756:	fba3 0302 	umull	r0, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2064      	movs	r0, #100	; 0x64
 800375e:	fb00 f303 	mul.w	r3, r0, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <UART_SetConfig+0x118>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003774:	4419      	add	r1, r3
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	fbb2 f2f3 	udiv	r2, r2, r3
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <UART_SetConfig+0x118>)
 800378e:	fba3 0302 	umull	r0, r3, r3, r2
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2064      	movs	r0, #100	; 0x64
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	3332      	adds	r3, #50	; 0x32
 80037a0:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <UART_SetConfig+0x118>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	f003 020f 	and.w	r2, r3, #15
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	440a      	add	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013800 	.word	0x40013800
 80037c0:	51eb851f 	.word	0x51eb851f

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2600      	movs	r6, #0
 80037c8:	4d0c      	ldr	r5, [pc, #48]	; (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	f000 f822 	bl	800381c <_init>
 80037d8:	2600      	movs	r6, #0
 80037da:	4d0a      	ldr	r5, [pc, #40]	; (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <__libc_init_array+0x44>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	0800385c 	.word	0x0800385c
 8003800:	0800385c 	.word	0x0800385c
 8003804:	0800385c 	.word	0x0800385c
 8003808:	08003860 	.word	0x08003860

0800380c <memset>:
 800380c:	4603      	mov	r3, r0
 800380e:	4402      	add	r2, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
